/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.file{	import com.hexagonstar.file.types.IFile;	/**	 * IFileIOSignalListener is an interface that needs to be implemented by classes which	 * should be notified by any of the file loader classes when FileIOSignals are	 * broadcasted.<br>	 * 	 * <p>When using the BulkLoader class you can let it 'quick-add' all the necessary	 * signal listeners for FileIOSignals for you to your class by using the	 * <code>addListenersFor()</code> method and 'quick-remove' them by using the	 * <code>removeListenersFor()</code> method. To be able to use these methods your	 * class needs to implement this interface.</p>	 * 	 * @see com.hexagonstar.file.BulkLoader	 * @see com.hexagonstar.file.ZipLoader	 * @see com.hexagonstar.file.FileIOEvent	 * @see com.hexagonstar.file.BulkFileIOEvent	 */	public interface IFileIOSignalListener	{		/**		 * Signal handler that is invoked whenever a file has been opened.		 * 		 * @param file The IFile broadcasted by the signal dispatcher.		 */		function onFileOpen(file:IFile):void;						/**		 * Signal handler that is invoked whenever a file load operation is progressing.		 * 		 * @param file The IFile broadcasted by the signal dispatcher.		 */		function onFileProgress(file:IFile):void;						/**		 * Signal handler that is invoked whenever a file has completed loading. Note that a		 * completed file does not necessarily mean that it was loaded successfully. Every		 * file loaded by one of the file loader classes is signaled as complete after		 * loading, regardless if it could be loaded successfully or not.		 * 		 * @param file The IFile broadcasted by the signal dispatcher.		 */		function onFileComplete(file:IFile):void;						/**		 * Signal handler that is invoked if a file load operation has been aborted.		 * 		 * @param file The IFile broadcasted by the signal dispatcher.		 */		function onFileAbort(file:IFile):void;						/**		 * Signal handler that is invoked whenever a HTTP status is broadcast by a file		 * load operation.		 * 		 * @param file The IFile broadcasted by the signal dispatcher.		 */		function onFileHTTPStatus(file:IFile):void;						/**		 * Signal handler that is invoked if an error occurs during a file load operation.		 * 		 * @param file The IFile broadcasted by the signal dispatcher.		 */		function onFileIOError(file:IFile):void;						/**		 * Signal handler that is invoked if a security error occurs during a file load		 * operation.		 * 		 * @param file The IFile broadcasted by the signal dispatcher.		 */		function onFileSecurityError(file:IFile):void;						/**		 * Signal handler that is invoked after a load operation has completed loading		 * all files.		 * 		 * @param file The IFile broadcasted by the signal dispatcher.		 */		function onAllFilesComplete(file:IFile):void;	}}