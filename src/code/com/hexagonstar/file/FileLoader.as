/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.file{	import com.hexagonstar.file.types.IFile;	import com.hexagonstar.util.env.getPath;	import flash.events.Event;	import flash.events.HTTPStatusEvent;	import flash.events.IOErrorEvent;	import flash.events.ProgressEvent;	import flash.events.SecurityErrorEvent;	import flash.net.URLLoader;	import flash.net.URLLoaderDataFormat;	import flash.net.URLRequest;			/**	 * A light-weight file loader that can be used to load a single file at a time. For	 * loading multiple files in one operation use the BulkLoader class instead.	 * 	 * @see com.hexagonstar.file.BulkLoader	 */	public class FileLoader	{		//-----------------------------------------------------------------------------------------		// Properties		//-----------------------------------------------------------------------------------------				/** @private */		protected var _file:IFile;		/** @private */		protected var _urlLoader:URLLoader;		/** @private */		protected var _useAbsoluteFilePath:Boolean;		/** @private */		protected var _preventCaching:Boolean;		/** @private */		protected var _loading:Boolean;						//-----------------------------------------------------------------------------------------		// Signals		//-----------------------------------------------------------------------------------------				/** @private */		protected var _fileOpenSignal:FileIOSignal;		/** @private */		protected var _fileProgressSignal:FileIOSignal;		/** @private */		protected var _fileCompleteSignal:FileIOSignal;		/** @private */		protected var _fileHTTPStatusSignal:FileIOSignal;		/** @private */		protected var _fileIOErrorSignal:FileIOSignal;		/** @private */		protected var _fileSecurityErrorSignal:FileIOSignal;						//-----------------------------------------------------------------------------------------		// Constructor		//-----------------------------------------------------------------------------------------				/**		 * Creates a new file loader instance.		 * 		 * @param useAbsoluteFilePath If true absolute file paths are used.		 * @param preventCaching If true the loader adds a timestamp to the file path to		 *            prevent file caching by server caches or proxies.		 */		public function FileLoader(useAbsoluteFilePath:Boolean = false,			preventCaching:Boolean = false)		{			_useAbsoluteFilePath = useAbsoluteFilePath;			_preventCaching = preventCaching;		}						//-----------------------------------------------------------------------------------------		// Public Methods		//-----------------------------------------------------------------------------------------				/**		 * Loads the specified file.		 * 		 * @param file The file to load.		 * @return true if the load operation has been started successfully, false if not,		 *         e.g. the File loader is already loading or a security error occured.		 */		public function load(file:IFile):Boolean		{			if (_loading) return false;						_file = file;			_loading = true;						var path:String = (_useAbsoluteFilePath ? getPath()				+ _file.path : _file.path)				+ (!_preventCaching ? "" : "?nocaching=" + new Date().time);						_urlLoader = new URLLoader();			_urlLoader.dataFormat = URLLoaderDataFormat.BINARY;						_urlLoader.addEventListener(Event.OPEN, onOpen);			_urlLoader.addEventListener(ProgressEvent.PROGRESS, onProgress);			_urlLoader.addEventListener(HTTPStatusEvent.HTTP_STATUS, onHTTPStatus);			_urlLoader.addEventListener(Event.COMPLETE, onFileComplete);			_urlLoader.addEventListener(IOErrorEvent.IO_ERROR, onIOError);			_urlLoader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onSecurityError);						try			{				_urlLoader.load(new URLRequest(path));			}			catch (err:Error)			{				onSecurityError(new SecurityErrorEvent(SecurityErrorEvent.SECURITY_ERROR,					false, false, err.message));				return false;			}						return true;		}						/**		 * Disposes the class.		 */		public function dispose():void		{			removerEventListeners();			removerSignalListeners();			_urlLoader = null;		}						/**		 * Returns a String Representation of the file loader.		 * 		 * @return A String Representation of the file loader.		 */		public function toString():String		{			return "[FileLoader]";		}						//-----------------------------------------------------------------------------------------		// Getters & Setters		//-----------------------------------------------------------------------------------------				/**		 * Indicates whether the loader is currently in a load operation or not.		 */		public function get loading():Boolean		{			return _loading;		}						/**		 * The file's currently loaded bytes.		 */		public function get bytesLoaded():uint		{			return _file.bytesLoaded;		}						/**		 * The file's total bytes.		 */		public function get bytesTotal():uint		{			return _file.bytesTotal;		}						/**		 * The file's load progress in percent.		 */		public function get percentLoaded():Number		{			return _file.percentLoaded;		}						public function get fileOpenSignal():FileIOSignal		{			if (!_fileOpenSignal) _fileOpenSignal = new FileIOSignal();			return _fileOpenSignal;		}						public function get fileProgressSignal():FileIOSignal		{			if (!_fileProgressSignal) _fileProgressSignal = new FileIOSignal();			return _fileProgressSignal;		}						public function get fileCompleteSignal():FileIOSignal		{			if (!_fileCompleteSignal) _fileCompleteSignal = new FileIOSignal();			return _fileCompleteSignal;		}						public function get fileHTTPStatusSignal():FileIOSignal		{			if (!_fileHTTPStatusSignal) _fileHTTPStatusSignal = new FileIOSignal();			return _fileHTTPStatusSignal;		}						public function get fileIOErrorSignal():FileIOSignal		{			if (!_fileIOErrorSignal) _fileIOErrorSignal = new FileIOSignal();			return _fileIOErrorSignal;		}						public function get fileSecurityErrorSignal():FileIOSignal		{			if (!_fileSecurityErrorSignal) _fileSecurityErrorSignal = new FileIOSignal();			return _fileSecurityErrorSignal;		}						//-----------------------------------------------------------------------------------------		// Event Handlers		//-----------------------------------------------------------------------------------------				/**		 * @private		 */		protected function onOpen(e:Event):void		{			relaySignal(FileIOSignal.OPEN);		}						/**		 * @private		 */		protected function onProgress(e:ProgressEvent):void		{			_file.bytesLoaded = e.bytesLoaded;			_file.bytesTotal = e.bytesTotal;			relaySignal(FileIOSignal.PROGRESS);		}						/**		 * @private		 */		protected function onHTTPStatus(e:HTTPStatusEvent):void		{			_file.httpStatus = e.status;			relaySignal(FileIOSignal.HTTP_STATUS);		}						/**		 * @private		 */		protected function onFileComplete(e:Event):void		{			_loading = false;			removerEventListeners();			_file.completeSignal.addOnce(onFileReady);			_file.content = _urlLoader.data;		}						/**		 * @private		 */		protected function onFileReady(file:IFile):void 		{			relaySignal(FileIOSignal.FILE_COMPLETE);		}						/**		 * @private		 */		protected function onIOError(e:IOErrorEvent):void		{			_loading = false;			removerEventListeners();			_file.errorMessage = e.text;			relaySignal(FileIOSignal.IO_ERROR);		}						/**		 * @private		 */		protected function onSecurityError(e:SecurityErrorEvent):void		{			_loading = false;			removerEventListeners();			_file.errorMessage = e.text;			relaySignal(FileIOSignal.SECURITY_ERROR);		}						//-----------------------------------------------------------------------------------------		// Private Methods		//-----------------------------------------------------------------------------------------				/**		 * @private		 */		protected function removerEventListeners():void		{			if (!_urlLoader) return;			_urlLoader.removeEventListener(Event.OPEN, onOpen);			_urlLoader.removeEventListener(ProgressEvent.PROGRESS, onProgress);			_urlLoader.removeEventListener(HTTPStatusEvent.HTTP_STATUS, onHTTPStatus);			_urlLoader.removeEventListener(Event.COMPLETE, onFileComplete);			_urlLoader.removeEventListener(IOErrorEvent.IO_ERROR, onIOError);			_urlLoader.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, onSecurityError);		}						/**		 * @private		 */		protected function removerSignalListeners():void		{			if (_fileOpenSignal) _fileOpenSignal.removeAll();			if (_fileProgressSignal) _fileProgressSignal.removeAll();			if (_fileHTTPStatusSignal) _fileHTTPStatusSignal.removeAll();			if (_fileCompleteSignal) _fileCompleteSignal.removeAll();			if (_fileIOErrorSignal) _fileIOErrorSignal.removeAll();			if (_fileSecurityErrorSignal) _fileSecurityErrorSignal.removeAll();		}						/**		 * @private		 */		protected function relaySignal(type:String):void		{			switch (type)			{				case FileIOSignal.OPEN:					if (_fileOpenSignal) _fileOpenSignal.dispatch(_file);					return;				case FileIOSignal.PROGRESS:					if (_fileProgressSignal) _fileProgressSignal.dispatch(_file);					return;				case FileIOSignal.HTTP_STATUS:					if (_fileHTTPStatusSignal) _fileHTTPStatusSignal.dispatch(_file);					return;				case FileIOSignal.FILE_COMPLETE:					if (_fileCompleteSignal) _fileCompleteSignal.dispatch(_file);					return;				case FileIOSignal.IO_ERROR:					if (_fileIOErrorSignal) _fileIOErrorSignal.dispatch(_file);					return;				case FileIOSignal.SECURITY_ERROR:					if (_fileSecurityErrorSignal) _fileSecurityErrorSignal.dispatch(_file);					return;			}		}	}}